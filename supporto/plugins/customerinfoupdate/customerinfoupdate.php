<?php


class CustomerInfoUpdatePlugin { 

	var $plugin_label="Customer Info Update";
	var $plugin_name="customerinfoupdate";
	var $plugin_description="This plugin allow your customer to update their contact and organization information dircetly from your portal, you can choose which fields your customer will be able to update for each module and in which order this fields should be showed!";
	var $affectedmodules=array("PortalBase","Accounts","Contacts");
	var $pluginconfig;
	var $require_vtapi=true;
	
	function __construct(){
		global $loaded_plugins;
		if($this->require_vtapi && !Api::is_connected()) return false;
		
		//$loaded_plugins['PaypalintegrationPaymentHandles']=new PaypalintegrationPaymentHandles;
		
		$this->pluginconfig=require ROOT_PATH."/plugins/".$this->plugin_name."/config.php";
		//$this->pluginconfig = ConfigEditor::read(ROOT_PATH."/plugins/inventorylines/config.php");
	}

	function settings(){
		if($this->require_vtapi && !Api::is_connected()) return false;
		global $mycwsapi;	
		
		$modfieldstmp['Contacts']=$mycwsapi->getModuleFields("Contacts");	
		$modfieldstmp['Accounts']=$mycwsapi->getModuleFields("Accounts");
		
		$hiddenfieldtypes=array("reference","autogenerated");
		foreach($modfieldstmp as $modulename => $moduleinfo){
			foreach($moduleinfo['fields'] as $fieldinfo){
				
				if(!in_array($fieldinfo['type']['name'], $hiddenfieldtypes) && isset($fieldinfo['editable']) && $fieldinfo['editable']==1)
					$plugindata['modfields'][$modulename]['fieldslabels'][$fieldinfo['name']]=$fieldinfo['label'];
			}
		}
		
		
		
		if(isset($_POST['settings'])){
			$newconfig = $_POST['settings'];
			$plugindata['altmess']=ConfigEditor::write(ROOT_PATH."/plugins/".$this->plugin_name."/config.php", $newconfig);	
			$this->pluginconfig=$newconfig;
		}
			
		$plugindata['config']=$this->pluginconfig;	
		
		foreach($this->affectedmodules as $am)
			if($am!="PortalBase")
				$plugindata['affectedmodules'][]=$am;
			
		return $plugindata;
	}

	function preTemplateLoad($modulename,$action,$data){
		if($this->require_vtapi && !Api::is_connected()) return $data;
		
		global $mycwsapi;
		$pluginconfig =  $this->pluginconfig;
		
		if($action=="base") $modulename=$_REQUEST['module'];
			
		
		if($pluginconfig[$modulename]['is_enabled']=="true" && $pluginconfig['is_enabled']=="true"){
		if(isset($_REQUEST['action']) && $_REQUEST['action']=='edit' && $action!="base") $action=$_REQUEST['action'];
		switch($action){
			case "base":{
				if(isset($_REQUEST['action']) && $_REQUEST['action']=='edit'){
					if($modulename=="Accounts") $data['id']=$_SESSION['loggeduser']['accountid'];
					
					$re = "/^[\\d]*x[\\d]*$/"; 
					if(preg_match($re,$data['id'])) $target=$data['id'];
					else{
						$modid=Api::getModuleId($modulename);
						$target=$modid."x".$data['id'];
					}	
					
										
					if($modulename=="Contacts"){
						$sparams = array(
							'id' => $data['id'], 
							'block'=>$modulename,
							'contactid'=>$_SESSION["loggeduser"]['id'],
							'sessionid'=>$_SESSION["loggeduser"]['sessionid']
						);
						$lmod = $GLOBALS["sclient"]->call('get_details', $sparams);
						if(isset($lmod[0]) && $lmod[0]!="#NOT AUTHORIZED#")
							$data['recordinfo']=$GLOBALS['api_client']->doRetrieve($target);
						else $data['recordinfo']=array();
					}
					
					else if($modulename=="Accounts"){
						$params = Array('id'=>$_SESSION["loggeduser"]['id']);
						$accountid = $GLOBALS["sclient"]->call('get_check_account_id', $params);
						if($accountid!=0) $data['recordinfo']=$GLOBALS['api_client']->doRetrieve($target);
						else $data['recordinfo']=array();
					}
					else $data['recordinfo']=array();
				
				    //$modfieldstmp=$mycwsapi->getModuleFields($modulename);
				    $modfieldstmp=$GLOBALS['api_client']->doDescribe($modulename);
					foreach($modfieldstmp['fields'] as $fieldinfo){	
						$data['fieldslabels'][$fieldinfo['name']]=$fieldinfo['label'];
						$data['fieldinfos'][$fieldinfo['name']]=$fieldinfo;
					}
					
					$data['pluginconfig']=$pluginconfig;
					Template::display($modulename,$data,'edit');
					die();
				}
				$GLOBALS['plugin_data']['customerinfoupdate']['updatestatus']="";
				if(isset($_POST['update_data'])){
					
					foreach($this->pluginconfig[$modulename]['fields'] as $fname)
						if(isset($_POST['updatedinfos'][$fname]) && $_POST['updatedinfos'][$fname]!="")
							$updatedinfos[$fname]=$_POST['updatedinfos'][$fname];
					
					if($modulename=="Contacts"){
						$sparams = array(
							'id' => $data['id'], 
							'block'=>$modulename,
							'contactid'=>$_SESSION["loggeduser"]['id'],
							'sessionid'=>$_SESSION["loggeduser"]['sessionid']
						);
						$lmod = $GLOBALS["sclient"]->call('get_details', $sparams);
						if(isset($lmod[0]) && $lmod[0]!="#NOT AUTHORIZED#"){
							$modid=Api::getModuleId($modulename);
							$target=$modid."x".$data['id'];
							$res=$this->reviseRecord($target,$updatedinfos);
							$GLOBALS['plugin_data']['customerinfoupdate']['updatestatus']="SUCCESS";
						}
						else $GLOBALS['plugin_data']['customerinfoupdate']['updatestatus']="FAILED";
					}
					
					else if($modulename=="Accounts"){
						$params = Array('id'=>$_SESSION["loggeduser"]['id']);
						$accountid = $GLOBALS["sclient"]->call('get_check_account_id', $params);
						if($accountid!=0){
							$modid=Api::getModuleId($modulename);
							$target=$modid."x".$accountid;
							$res=$this->reviseRecord($target,$updatedinfos);
							$GLOBALS['plugin_data']['customerinfoupdate']['updatestatus']="SUCCESS";
						}
						else $GLOBALS['plugin_data']['customerinfoupdate']['updatestatus']="FAILED";
					}
										
				}
			}
			case "list":{
				break;
			}			
			case "detail":
			case "detail_api": {
				if($modulename=="Accounts") $data['id']=$_SESSION['loggeduser']['accountid'];
				else $data['id']=$_REQUEST['id'];
				$data['plugin_data']['customerinfoupdate']['module']=$modulename;
				$data['plugin_data']['customerinfoupdate']['id']=$data['id'];
				$data['plugin_data']['views']['header'][$this->plugin_name]="editbutton";
				break;
			}
			case "edit": {
				break;
			}
		}
		
		}
		
		return $data;
		
	}
	
	function reviseRecord($recordid,$updatedinfo){
		global $mycwsapi;
		$updatedinfo['id']=$recordid;		
		$updatedrecord=json_encode($updatedinfo);
		
		$data = array('operation' => 'revise', 'sessionName' => $mycwsapi->session_data->sessionName,'element'=>$updatedrecord);
		$result=WSRequest::post($mycwsapi->vtiger_ws_url,$data);		

		if(!$result) return false;
		else return json_decode(json_encode($result),true);
		
	}
	/*
	function postTemplateLoad($modulename,$action,$data){
		Template::displayPlugin('inventorylines',$data,'postload');
	}
	*/

}


?>